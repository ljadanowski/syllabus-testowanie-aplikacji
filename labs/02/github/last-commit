#! /usr/bin/env ruby
# -*- coding: utf-8 -*-

# Źródło:
#
#   https://github.com/smt116/ruby.last.commit
#
# Użyte gemy:
#
#   gem install github_api bitbucket_rest_api ansi
#
# Sprawdzanie pozostałego limitu na github.com:
#
#   curl -i https://api.github.com/rate_limit

begin
  require 'ansi/code' # http://rubydoc.info/gems/ansi/frames
  include ANSI::Code

  require 'bitbucket_rest_api' # http://rubydoc.info/gems/bitbucket_rest_api/frames
  require 'github_api' # http://rubydoc.info/gems/github_api/frames
  require 'csv'
  require 'time'
  require 'optparse'
  require 'ostruct'
  require 'yaml'

  # na podstawie http://github.com/wbzyl/nosql-tutorial/blob/master/pp/db/mongodb/gutenberg2mongo.rb
  class ParseArgs
    def self.parse(args)
      options = OpenStruct.new
      options.quiet_mode = false # wyświetlać informacje w przypadku błędu 404 (nieodnaleziono użytkownika bądź repo)
      options.group = false # filtrowanie po grupie
      options.csv_file = false # plik z danymi
      options.message = false # wyświetlać wiadomość przesłaną razem z commitem?
      options.user_regex = false # filtrowanie po nazwie użytkownika
      options.commits = 1 # ilość ostatnich commitów do wyświetlenia
      options.error_details = false # wyświetlać szczegółowy komunikat błędu?
      options.credentials_github = false # basic_auth dla githuba
      options.credentials_bitbucket = false # basic_auth dla bitbucketa

      opts = OptionParser.new do |opts|
        opts.banner = "Użycie: #{$0} plik.csv [OPCJE]"

        opts.on("-q", "--quiet") do
          options.quiet_mode = true
        end

        opts.on("-g", "--group GRUPA", "grupa (pon12,wto10,wto12)") do |name|
          options.group = name
        end

        opts.on("-m", "--message", "wyświetl wiadomość wysłaną z commitem") do
          options.message = true
        end

        opts.on("-u", "--user REGEX", "wyrażenie regularne do filtrowania loginu") do |regex|
          options.user_regex = regex
        end

        opts.on("-c", "--commits NUMBER", "ilość comitów do wyświetlenia. Domyślnie 1, 0 aby wyświetlić maksymnalną ilość") do |number|
          options.commits = number
        end

        opts.on("--error-details", "wyświetla szczegóły błędu") do
          options.error_details = true
        end

        opts.on("--credentials PATH", "folder w katalogu #{ENV['HOME']} zawierający plik github.yml oraz bitbucket.yml z polami 'login' i 'password'") do |path|
          begin
            options.credentials_github = YAML.load_file File.join(ENV['HOME'], path, '/github.yml')
          rescue
            puts red("Brak pliku " + yellow("#{ENV['HOME']}/#{path}/github.yml"))
          end
          begin
            options.credentials_bitbucket = YAML.load_file File.join(ENV['HOME'], path, '/bitbucket.yml')
          rescue
            puts red("Brak pliku " + yellow("#{ENV['HOME']}/#{path}/bitbucket.yml"))
          end
        end

        opts.separator "Pozostałe opcje:"

        opts.on_tail("-h", "--help", "wypisz pomoc") do
          puts opts
          exit
        end

      end

      options.csv_file = opts.parse!(args)[0]
      options
    end
  end

  options = ParseArgs.parse(ARGV)

  if not options.csv_file
    puts "Pomoc: #{$0} --help"
    exit
  end

  data = open(options.csv_file).readlines
  csv_data = CSV.parse(data.join)

  if options.credentials_github && (options.credentials_github['login'] && options.credentials_github['password'])
    github = Github.new login: options.credentials_github['login'], password: options.credentials_github['password']
  else
    github = Github.new
  end
  if options.credentials_bitbucket && (options.credentials_bitbucket['login'] && options.credentials_bitbucket['password'])
    bitbucket = BitBucket.new login: options.credentials_bitbucket['login'], password: options.credentials_bitbucket['password']
  else
    bitbucket = BitBucket.new
  end

  csv_data.each do |repo|
    if options.user_regex && !(repo[2].downcase =~ /#{options.user_regex}/)
      next
    end

    begin
      array = Array.new
      if repo[4]=="bitbucket"
        all = bitbucket.repos.changesets.all(repo[2], repo[3])
        for i in 0..(all.changesets.size-1)
          row = all.changesets[i]
          array.push(:date => row[:timestamp], :author => row[:raw_author], :message => row[:message])
        end
        array.reverse
      elsif repo[4]=="github"
        github.repos.commits.list(repo[2], repo[3]).each do |row|
          array.push(:date => DateTime.parse(row.commit.author[:date]).strftime("%F %T"), :author => row.commit.author[:name] + " <#{row.commit.author[:email]}>", :message => row.commit[:message])
        end
      else
        puts "Zdefiniuj typ repozytorium dla konta #{repo[2]}"
        next
      end
    rescue Github::Error::NotFound, BitBucket::Error::NotFound
      if !options.quiet_mode
        puts "Nie znaleziono konta #{yellow(repo[2])} lub repozytorium #{yellow(repo[3])} dla #{red(repo[0])} #{red(repo[1])}"
      end
      next
    end

    if (options.commits.to_i == 0) || (options.commit.to_i >= array.size)
      max = array.size-1
    else
      max = options.commits.to_i-1
    end

    for i in 0..max
      date = array[i][:date] < Date.today.prev_day(8).to_s ? red(array[i][:date]) : green(array[i][:date])
      line = "#{date} #{yellow(repo[2] + '/' + repo[3])} (#{array[i][:author]})"
      if options.message
        line += " {" + cyan(array[i][:message]) + "}"
      end
      if options.group && options.group == repo[5]
        puts line
      elsif !options.group
        puts line += " " + magenta(repo[5])
      end
    end
  end
rescue SystemExit, Interrupt
  puts "Operacja anulowana!"
rescue Github::Error::Forbidden, BitBucket::Error::Forbidden => e
  puts red("Błąd przy próbie pobrania danych! prawdopodobnie wyczerpałeś limit zapytań")
  puts "Szczegóły błędu: #{e}" if options.error_details
rescue Exception => e
  puts "Niezdefinowany błąd aplikacji!"
  puts "Szczegóły błędu: #{e}" if options.error_details
end
